#! /bin/sh


# remember the name of this script
SCRIPT_NAME=$0

CWD=`pwd`
DATE=`date`

_checkfile=./src/agent/main.cpp
if [ ! -f $_checkfile ]
then
    echo "ERROR: Cannot find checkfile: ${_checkfile}"
    echo "This script should be executed from ROOT of the border router directory"
    echo "For example:"
    echo ""
    echo "cd \${BORDERROUTER}"
    echo "sh ./script/bootstrap"
    echo ""
    exit 1
fi

# source our common stuff
. "$(dirname "$0")"/_initrc

OPENTHREAD_ONMESH_PREFIX=fd11:22
ETH0_IPV6_BASE_PREFIX=fd11:33

debug_echo() {
    echo "${@}"
}


determine_eth0_name()
{
    ETH0_NAME=''
    
    #  
    # this gives us a sorted list of network interface names
    for x in `cd /sys/class/net ; ls`
    do
        # We want the physical device
        # Not things like "usb0" or "wpan0"
        # And we assume the first one is what we want
        debug_echo "Consider: $x"
        ignore=false
        case $x in
        usb* | can* | wpan* | br* | wlan* | lo)
           # by name we can ignore USB-gadget, CANbus, 
           # Wpantund, wireless and loopback
           ignore=true
           ;;
        *)
           ignore=false
           ;;
        esac

        if $ignore
        then
            debug_echo "Ignore $x by name"    
            continue
        fi
       
        echo "Consider: $x" 
        if [ ! -L /sys/class/net/$x/device ]
        then
        debug_echo "Not a DEVICE $x"
            continue
        fi

        type=`cat /sys/class/net/$x/type`
        # Type1 = ARPHRD_ETHER
        if [ $type -ne 1 ]
        then
            debug_echo "Not ARPHRD_ETHER"
            continue
        fi
        # We assume the first thing we find is our device
        ETH0_NAME=$x
        break
    done

    if [ -z "${ETH0_NAME}" ]
    then
        echo "Cannot determine ETH0 name...."
        exit 1
    fi
    echo "Assuming: Primary ETHERNET name is $ETH0_NAME"
}


install_radvd()
{
    echo "Fetching RADVD..."
    echo "apt-get install radvd"
    sudo apt-get install radvd
}


choose_random_eth0_address()
{
    # steps below are
    #   Using "od" see http://man7.org/linux/man-pages/man1/od.1.html
    #      read from /dev/urandom
    #
    # We use /dev/urandom not /dev/random for these reasons:
    # 1) This is for private (not public) test purposes
    # 2) urandom might stall ... and not give us bytes
    # 
    # We want data in 16bit hex, hence: --format=x2
    # We want only 4 bytes, hence --read-bytes=4
    #
    # The output looks like:
    #      0000000 1234 5678
    #      0000008
    #
    # head gives us the first line
    # cut gives us the items 2 and 3 on the line
    # tr  converts the space into a ':'
    #
    RANDOM_32BIT_VALUE=`od --read-bytes=4 --format=x2 /dev/urandom | \
        head -1 | \
        cut -d' ' -f2,3 | 
        tr ' ' ':'`

    # thus, "RANDOM_32BIT_VALUE=1234:5678"

    # We'll use this for the radvd config
    ETH0_IPV6_PREFIX=${ETH0_IPV6_BASE_PREFIX}:${RANDOM_32BIT_VALUE}

    # and this for the static network address
    ETH0_IPV6_STATIC_ADDRESS=${ETH0_IPV6_PREFIX}::1
}


configure_radvd()
{
    CFG_FILE=/etc/radvd.conf
    if [ -f $CFG_FILE ]
    then
        echo "radvd config file exists: $CFG_FILE"
	echo "SKIPPING radvd configuration"
    else
        sudo tee -a /etc/radvd.conf <<__EOF__
#
# This RADVD configuration file was created
# by the OpenThread configuration script $SCRIPT_NAME
# Executed in the directory ${CWD} on ${DATE}
#
# The purpose is to configure IPV6 in an issolated and 
# standalone network configuration for the purpose of test only
#
# This is by no means a complete IPv6 configuration
# it is sufficent to allow coap transactions
# with thread devices on the thread mesh network
# attched to this boarder router
#
interface $ETH0_NAME {
    # We want to send router adverts
    AdvSendAdvert on;

    # This is not a proper IPv6 router
    # it is only for openthread
    AdvDefaultPreference low;

    # We should advertize this prefix
    prefix ${ETH0_IPV6_PREFIX}::/64 {
         # we want this "on link"
         AdvOnLink on;
         # devices should self-assign addresses with this prefix
         AdvAutonomous on;
         AdvRouterAddr on;
        };
    # tell everyone 'we are the route' to this address range
    route ${OPENTHREAD_ONMESH_PREFIX}::/64 {
        AdvRoutePreference high;
        AdvRouteLifetime 60;
    };
};
__EOF__
    fi
}

assign_eth0_static_ipv6() {

    sudo tee -a /etc/network/interfaces << __EOF__

# This configuration was created by 
# the openthread ${SCRIPT_NAME}
# executing in the directory ${CWD} 
# and executed on ${DATE}
#
# for the purposes of testing ipv6 addresses
# in an issolated network configuration

# ensure ETH0 is configured at boot
auto ${ETH0_NAME}

# Configure the IPv6 address static
# Note: IPv4 is not effected by this
iface ${ETH0_NAME} inet6 static
    address ${ETH0_IPV6_STATIC_ADDRESS}
    netmask 64
__EOF__

}




bbb_main() {
    install_radvd
    determine_eth0_name
    choose_random_eth0_address
    configure_radvd
    assign_eth0_static_ipv6

    echo "You should now reboot your Device"
}


case ${PLATFORM} in
"beagleboneblack")
    bbb_main
    ;;
*)
    die "Unsupported/unknown platform ${PLATFORM}"
    ;;
esac

